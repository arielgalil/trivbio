{
  "rules": {
    "admins": {
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      ".write": false
    },
    "questions": {
      ".read": "auth != null",
      ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      ".indexOn": ["createdAt", "topic"],
      "$questionId": {
        "question": { ".validate": "newData.isString() && newData.val().length > 0" },
        // --- FIXED answers validation ---
        "answers": {
           // Validate it has children '0' and '1', and they are strings.
           ".validate": "newData.hasChild('0') && newData.hasChild('1') && newData.child('0').isString() && newData.child('1').isString()"
           // Add validation for other potential answers if needed, e.g., newData.child('2').isString() || !newData.hasChild('2')
        },
        "correct": { ".validate": "newData.isNumber()" },
        "topic": { ".validate": "newData.isString() && (newData.val() == 'human-body' || newData.val() == 'cell' || newData.val() == 'ecology')" },
        // --- FIXED tags validation ---
        "tags": {
           // Allow null OR an object that has children (representing a non-empty array)
           ".validate": "newData.val() == null || newData.hasChildren()"
           // Optionally add validation for tag contents, e.g. ensure children are strings:
           // ".validate": "newData.val() == null || (newData.hasChildren() && newData.child(newData.val().keys()[0]).isString())" // Checks first tag is string
         },
        "createdAt": {
          ".write": "!data.exists()",
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "$other": { ".validate": false }
      }
    },
    "players": {
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
       ".indexOn": ["createdAt", "nickname", "registrationDate"],
      "$playerId": {
        ".read": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",
        ".write": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",
        "createdAt": {
           ".write": "!data.exists()",
           ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "nickname": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 25" },
        "darkMode": { ".validate": "newData.isBoolean()" },
        "lastTopic": { ".validate": "newData.isString()" },
        "cumulativeScore": { ".validate": "newData.isNumber()" },
        "correctCount": { ".validate": "newData.isNumber()" },
        "wrongCount": { ".validate": "newData.isNumber()" },
        "availableSkips": { ".validate": "newData.isNumber() && newData.val() >= 0" },
        "availableFiftyFifty": { ".validate": "newData.isNumber() && newData.val() >= 0" },
        "topicStats": { "$topic": { ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('wrongCount').isNumber()" } },
        "tagStats": { "$tag": { ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('wrongCount').isNumber()" } },
        "adminDarkMode": { ".validate": "newData.isBoolean()" },
         "registrationDate": {
           ".write": "!data.exists()",
           ".validate": "newData.isString() && newData.val().matches(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)"
         },
        "$other": { ".validate": false }
      }
    },
    "gameResults": {
       ".read": "auth != null",
       "$date": {
         "$playerId": {
           ".read": "auth != null",
           ".write": "auth != null && auth.uid === $playerId",
            // Added playerId validation from user request implicitly before
           ".validate": "newData.hasChildren(['correctCount', 'totalQuestions', 'longestStreak', 'score', 'timestamp', 'topic', 'tools', 'nickname']) && newData.child('score').isNumber() && newData.child('correctCount').isNumber() && newData.child('totalQuestions').isNumber() && newData.child('totalQuestions').val() >= newData.child('correctCount').val() && newData.child('longestStreak').isNumber() && newData.child('timestamp').isString() && newData.child('topic').isString() && newData.child('nickname').isString() && newData.child('tools').hasChildren(['fiftyFifty', 'addTime', 'skips']) && newData.child('tools/fiftyFifty').isNumber() && newData.child('tools/addTime').isBoolean() && newData.child('tools/skips').isNumber()"
         }
       }
    },
    "leaderboard": {
      ".indexOn": ["cumulativeScore"],
      ".read": "auth != null",
      "$playerId": {
         ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
         ".validate": "newData.hasChildren(['nickname', 'cumulativeScore']) && newData.child('nickname').isString() && newData.child('cumulativeScore').isNumber()"
      }
    }
  }
}