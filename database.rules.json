{
  "rules": {
    "admins": {
      // מאפשר קריאה רק לאדמינים רשומים כדי לאמת את עצמם
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      // לא מאפשר כתיבה לאף אחד ישירות דרך הכללים
      ".write": false
    },
    "questions": {
      // כל משתמש מאומת (כולל אנונימי) יכול לקרוא שאלות
      ".read": "auth != null",
      // רק אדמינים יכולים לכתוב (ליצור/לעדכן/למחוק) שאלות
      ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true"
    },
    "players": {
      // אדמינים יכולים לקרוא את כל רשימת השחקנים
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      "$playerId": {
        // משתמש יכול לקרוא את הנתונים של עצמו, ואדמין יכול לקרוא נתונים של כל משתמש
        ".read": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",
        // משתמש יכול לכתוב לנתונים של עצמו (ליצירה ראשונית ועדכונים), ואדמין יכול לכתוב לנתונים של כל משתמש
        ".write": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",

        // --- ולידציה ספציפית לשדות ---
        "nickname": {
          // בדיקה שהכינוי הוא מחרוזת לא ריקה באורך תקין
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 25"
        },
        "darkMode": {
          // בדיקה שהערך הוא בוליאני (true/false)
          ".validate": "newData.isBoolean()"
        },
        "lastTopic": {
          // בדיקה שהערך הוא מחרוזת
          ".validate": "newData.isString()"
        },
        "registrationDate": {
          ".write": "data.exists() ? false : (auth != null && auth.uid === $playerId)", // אפשר כתיבה רק אם הנתון לא קיים (יצירה) ורק ע"י המשתמש
          ".validate": "newData.isString() && newData.val().matches(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)" // ולידציה של פורמט YYYY-MM-DD
        },
         "createdAt": {
            ".write": "data.exists() ? false : (auth != null && auth.uid === $playerId)", // אפשר כתיבה רק אם הנתון לא קיים (יצירה) ורק ע"י המשתמש
            // שינוי הולידציה להתאמה ל-ServerValue.TIMESTAMP (או ל-isNumber אם שומרים חותמת זמן רגילה)
            ".validate": "newData.isNumber()" // מתאים ל-ServerValue.TIMESTAMP או חותמת זמן רגילה
        },
        "cumulativeScore": {
          // בדיקה שהניקוד הוא מספר
          ".validate": "newData.isNumber()"
        },
        "correctCount": {
          // בדיקה שהספירה היא מספר
          ".validate": "newData.isNumber()"
        },
        "wrongCount": {
          // בדיקה שהספירה היא מספר
          ".validate": "newData.isNumber()"
        },
        "availableSkips": {
            // בדיקה שהמספר לא שלילי
            ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "availableFiftyFifty": {
            // בדיקה שהמספר לא שלילי
            ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "topicStats": {
          // ולידציה של מבנה הסטטיסטיקות לנושא
          "$topic": {
            ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('wrongCount').isNumber()"
          }
        },
        "tagStats": {
          // ולידציה של מבנה הסטטיסטיקות לתגית
          "$tag": {
            ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('wrongCount').isNumber()"
          }
        },
        // מאפשר כתיבה רק לשדות המוכרים המפורטים כאן
        "$other": {
          ".validate": "$other === 'nickname' || $other === 'darkMode' || $other === 'lastTopic' || $other === 'registrationDate' || $other === 'createdAt' || $other === 'cumulativeScore' || $other === 'correctCount' || $other === 'wrongCount' || $other === 'availableSkips' || $other === 'availableFiftyFifty' || $other === 'topicStats' || $other === 'tagStats'"
        }
      },
      // אינדקסים נשארים כפי שהם
      ".indexOn": ["nickname", "registrationDate"]
    },
    "gameResults": {
      // כל משתמש מאומת יכול לקרוא תוצאות
      ".read": "auth != null",
      "$date": {
        "$gameResultId": {
          ".read": "auth != null",
          // מאפשר יצירה חדשה, ומאפשר עדכון רק אם ה-playerId בתוך התוצאה תואם למשתמש המאומת
          ".write": "auth != null && (!data.exists() || data.child('playerId').val() === auth.uid)",
          // ולידציה מעודכנת עם תיקון ל-timestamp (מחרוזת במקום מספר)
          ".validate": "newData.hasChildren(['correctCount', 'totalQuestions', 'longestStreak', 'score', 'timestamp', 'topic', 'tools', 'nickname', 'playerId']) && newData.child('playerId').isString() && newData.child('playerId').val() === auth.uid && newData.child('score').isNumber() && newData.child('correctCount').isNumber() && newData.child('totalQuestions').isNumber() && newData.child('totalQuestions').val() >= newData.child('correctCount').val() && newData.child('longestStreak').isNumber() && newData.child('timestamp').isString() && newData.child('topic').isString() && newData.child('nickname').isString() && newData.child('tools').hasChildren(['fiftyFifty', 'addTime', 'skips']) && newData.child('tools/fiftyFifty').isNumber() && newData.child('tools/addTime').isBoolean() && newData.child('tools/skips').isNumber()"
        }
      }
    },
    "leaderboard": {
      // אינדקס חובה למיון הלוח
      ".indexOn": ["cumulativeScore"],
      // כל משתמש מאומת יכול לקרוא את הלוח
      ".read": "auth != null",
      "$playerId": {
        // רק מנהלים יכולים לכתוב ישירות ללוח הדירוג (עדיף לנהל דרך Cloud Function)
        ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
        // ולידציה בסיסית אם מנהל כותב
        ".validate": "newData.hasChildren(['nickname', 'cumulativeScore']) && newData.child('nickname').isString() && newData.child('cumulativeScore').isNumber()"
      }
    }
  }
}