{
  "rules": {
    "admins": {
      // מאפשר קריאה רק לאדמינים רשומים כדי לאמת את עצמם
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      // לא מאפשר כתיבה לאף אחד ישירות דרך הכללים (ניהול אדמינים יעשה ידנית בקונסול או דרך פונקציית ענן מאובטחת)
      ".write": false
    },
    "questions": {
      // כל משתמש מאומת יכול לקרוא שאלות
      ".read": "auth != null",
      // רק אדמינים יכולים לכתוב (ליצור/לעדכן/למחוק) שאלות
      ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true"
    },
    "players": {
      // אדמינים יכולים לקרוא את כל רשימת השחקנים (עבור טעינת הרשימה בפאנל)
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      "$playerId": {
        // משתמש יכול לקרוא את הנתונים של עצמו, ואדמין יכול לקרוא נתונים של כל משתמש
        ".read": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",

        // *** חוק כתיבה מעודכן: מאפשר לשחקן עצמו או לאדמין לכתוב/למחוק את נתוני השחקן ***
        ".write": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",

        // חוקים ספציפיים לשדות (אופציונלי, ניתן להסתמך על חוק ה-write הכללי למעלה לאדמינים)
        // היתרון בחוקים אלו הוא הגבלת יכולת המשתמש הרגיל לעדכן רק שדות מסוימים
        "nickname": {
          // משתמש יכול לעדכן כינוי רק אם הוא קיים, אדמין יכול לעדכן תמיד (בגלל החוק הכללי)
          ".write": "auth != null && auth.uid === $playerId && (data.exists() || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",
          ".validate": "newData.isString() && newData.val().length <= 25 && newData.val().length > 0" // הוספתי בדיקה שאורך גדול מ-0
        },
        "adminDarkMode": { // שיניתי שם מ-darkModeเพื่อให้ตรงกับ הקוד
          // משתמש יכול לעדכן רק אם הוא אדמין (לפי הקוד הקיים) - אז אין צורך בחוק כתיבה ספציפי כאן, החוק הכללי לאדמין יספיק.
          // נוסיף ולידציה למקרה שאדמין כותב
          ".validate": "newData.isBoolean()"
        },
        "lastTopic": {
          ".write": "auth != null && auth.uid === $playerId && data.exists()",
          ".validate": "newData.isString()"
        },
        "registrationDate": {
             // מומלץ לא לאפשר שינוי תאריך הרשמה אחרי היצירה
            ".write": "data.exists() ? false : (auth != null && auth.uid === $playerId)", // אפשר כתיבה רק אם הנתון לא קיים (יצירה) ורק ע"י המשתמש
            ".validate": "newData.isString() && newData.val().matches(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)" // ולידציה של פורמט YYYY-MM-DD
        },
        // שדות ניקוד וסטטיסטיקות - בדרך כלל עדיף לעדכן דרך פונקציית ענן מאובטחת בסיום משחק,
        // אך נשאיר את האפשרות למשתמש לעדכן אם אין פונקציית ענן כרגע.
        "cumulativeScore": {
          ".write": "auth != null && auth.uid === $playerId",
          ".validate": "newData.isNumber()"
        },
        "correctCount": {
          ".write": "auth != null && auth.uid === $playerId",
          ".validate": "newData.isNumber()"
        },
        "wrongCount": {
          ".write": "auth != null && auth.uid === $playerId",
          ".validate": "newData.isNumber()"
        },
        "topicStats": {
          ".write": "auth != null && auth.uid === $playerId",
          "$topic": {
            ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('wrongCount').isNumber()"
          }
        },
        "tagStats": {
          ".write": "auth != null && auth.uid === $playerId",
          "$tag": {
            ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('wrongCount').isNumber()"
          }
        },
        // מונע כתיבה של שדות אחרים לא ידועים על ידי משתמש רגיל
        "$other": {
          ".validate": "newData.isString() == false && newData.isNumber() == false && newData.isBoolean() == false" // מניעת שדות נוספים ברמה העליונה
        }
      },
      // אינדקסים חשובים לביצועים ושאילתות
      ".indexOn": ["nickname", "registrationDate"]
    },
    "gameResults": {
      // כל משתמש מאומת יכול לקרוא תוצאות משחקים
      ".read": "auth != null",
      "$date": {
        // אינדקסים אפשריים לסטטיסטיקות (אם תרצה לסנן לפי ניקוד או סטטוס יומי)
        // ".indexOn": ["correctCount"],
        ".read": "auth != null", // אפשר לקרוא את כל התוצאות לתאריך נתון
        "$gameResultId": { // שינוי לשימוש במזהה ייחודי במקום playerId ישירות
          ".read": "auth != null",
          // רק המשתמש שיצר את התוצאה יכול לכתוב אותה
          ".write": "auth != null && (!data.exists() || data.child('playerId').val() === auth.uid)", // אפשר יצירה, או עדכון רק אם ה-playerId תואם
          ".validate": "newData.hasChildren(['playerId', 'score', 'correctAnswers', 'totalQuestions', 'timestamp', 'topic', 'nickname']) && newData.child('playerId').isString() && newData.child('score').isNumber() && newData.child('correctAnswers').isNumber() && newData.child('totalQuestions').isNumber() && newData.child('totalQuestions').val() >= newData.child('correctAnswers').val() && newData.child('timestamp').isNumber() && newData.child('topic').isString() && newData.child('nickname').isString()", // התאמה לשדות שהקוד שולח
           // הסרתי את ה-tools כרגע כדי לפשט, הוסף אם אתה שומר אותם
           // && newData.child('tools').hasChildren(['fiftyFifty', 'addTime', 'skips']) && newData.child('tools/fiftyFifty').isBoolean() && newData.child('tools/addTime').isBoolean() && newData.child('tools/skips').isNumber()"
          "playerId": { ".validate": "newData.val() === auth.uid" } // לוודא שמי שכותב הוא ה-playerId
        }
      }
    },
    "leaderboard": {
      // אינדקס חובה למיון הלוח
      ".indexOn": ["cumulativeScore"],
      // כל משתמש מאומת יכול לקרוא את הלוח
      ".read": "auth != null",
      "$playerId": {
        // רק פונקציית ענן או אדמין אמורים לעדכן את הלוח, לא השחקן ישירות.
        // נאפשר כרגע לאדמין לעדכן ידנית אם צריך, אבל מומלץ למחוק את החוק הזה ולנהל דרך פונקציה.
        ".write": "auth != null && (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true)",
        // ולידציה בסיסית אם כותבים
        ".validate": "newData.hasChildren(['nickname', 'cumulativeScore', 'correctAnswersCount']) && newData.child('nickname').isString() && newData.child('cumulativeScore').isNumber() && newData.child('correctAnswersCount').isNumber()"
      }
    }
  }
}